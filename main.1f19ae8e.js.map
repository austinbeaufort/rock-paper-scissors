{"version":3,"sources":["node_modules/home-on-the-range/index.js","src/score.js","src/app.js","main.js"],"names":["score","user","computer","displayScore","document","querySelector","displayContent","addListenerAndStartGame","addEventListener","event","runTheGame","assignDisplayScoreVariables","textContent","userChoice","target","className","log","pickWinner","computerChoice","h","randomChoice","console","main"],"mappings":"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":"main.1f19ae8e.js","sourceRoot":"..","sourcesContent":["const h = {\r\n    range: function(firstNumber, secondNumber) {\r\n \r\n        if (firstNumber < 0 && secondNumber === undefined) {\r\n            secondNumber = 0;\r\n            return makeArray(firstNumber, secondNumber);\r\n        } \r\n        \r\n        else if (secondNumber === undefined) {\r\n            secondNumber = firstNumber;\r\n            firstNumber = 0;\r\n            return makeArray(firstNumber, secondNumber);\r\n        } \r\n        \r\n        else if (firstNumber <= secondNumber) {\r\n            return makeArray(firstNumber, secondNumber);\r\n        } \r\n        \r\n        else if (firstNumber >= secondNumber) {\r\n            return makeReverseArray(firstNumber, secondNumber);\r\n        }\r\n    \r\n        return rangeArray;\r\n    },\r\n    \r\n    // adds strings and numbers\r\n    add: function(...numbers) {\r\n        let numbersFlattened = numbers.reduce((accumulator, currentValue) => accumulator.concat(currentValue), []);\r\n\r\n        let numbersToBeSummed = numbersFlattened.map((item) => Number(item));\r\n        \r\n    \r\n        let sum = numbersToBeSummed.reduce((accumulator, currentValue) => accumulator + currentValue);\r\n        return sum;\r\n    },\r\n    \r\n    // complete array flatten\r\n    deep: function(...arrays) {\r\n        let levelArray = [];\r\n        for (let i = 0; i < arrays.length; i++) {\r\n            if(!Array.isArray(arrays[i])) {\r\n                levelArray.push(arrays[i]);\r\n                continue;\r\n            }\r\n            let newArray = arrays[i].flat(Infinity);\r\n            levelArray.push(newArray);\r\n        }\r\n        let flatArray = levelArray.flat();\r\n        return flatArray;\r\n    },\r\n\r\n    // \r\n    createFibArray: function(numToReach) {\r\n        let firstNum = BigInt(1);\r\n        let secondNum = BigInt(1);\r\n        let total = 0;\r\n        let fibArray = [];\r\n        let count = 0;\r\n        fibArray.push(BigInt(total));\r\n        fibArray.push(firstNum);\r\n        fibArray.push(secondNum);\r\n        while(true) {\r\n            total = BigInt(firstNum + secondNum);\r\n            if (count < numToReach) {\r\n                fibArray.push(total);\r\n                firstNum = BigInt(secondNum);\r\n                secondNum = BigInt(total);\r\n                count++;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        return fibArray;\r\n    },\r\n    getPrimeFactors: function(number) {\r\n        let primeArray = [];\r\n        let i = 2;\r\n        while(i < 1000000) {\r\n            if (number % i === 0) {\r\n                primeArray.push(i);\r\n                number /= i;\r\n                i = 2;\r\n            }\r\n            else {\r\n                i++;\r\n            }\r\n        }\r\n        return primeArray;\r\n    },\r\n\r\n    findLargestPrimeFactor: function(number) {\r\n        let primeArray = this.getPrimeFactors(number);\r\n        let largestPrime = Math.max(...primeArray);\r\n        return largestPrime;\r\n    },\r\n\r\n    findSmallestPrimeFactor: function(number) {\r\n        let primeArray = this.getPrimeFactors(number);\r\n        let smallestPrime = Math.min(...primeArray);\r\n        return smallestPrime;\r\n    },\r\n\r\n    numIsPalindrome: function(number) {\r\n        let newNumber = String(number).split('');\r\n        let numToCheck = Math.floor(newNumber.length / 2);\r\n        for (let i = 0; i <= numToCheck; i++) {\r\n            if (newNumber[i] == newNumber[newNumber.length - i - 1]) {\r\n                if (i == numToCheck) {\r\n                    return true;\r\n                }\r\n                continue;\r\n            }\r\n            break;\r\n        }\r\n        return false;\r\n    },\r\n\r\n    findLCM: function(...args) {\r\n        let newArray = this.deep(args);\r\n        let numArray = newArray.map(item => Number(item));\r\n        let found = false;\r\n        let answer = 2;\r\n        while (found === false) {\r\n            found = numArray.every(item => {\r\n                return answer % item === 0;\r\n            });\r\n            if (found === true) return answer;\r\n            answer++;\r\n        }\r\n        return answer;\r\n    },\r\n\r\n    findNthPrime: function(number) {\r\n        let count = 0;\r\n        let rangeArray = h.range(2, 50000000);\r\n        for (let item of rangeArray) {\r\n            let isPrime = true;\r\n            for (i = 2; i <= Math.sqrt(item); i++){\r\n                if(item % i === 0 && item != i){\r\n                   isPrime = false;\r\n                }\r\n             }\r\n            if (isPrime === true) {\r\n                count++;\r\n                if (count === number) {\r\n                    return item;\r\n                }\r\n            }\r\n        }\r\n        return primeArray;\r\n    },\r\n\r\n    getPrimeArray: function(...args) {\r\n        let primeArray = [];\r\n        if (args.length === 1) {\r\n            args[1] = args[0];\r\n            args[0] = 2;\r\n        }\r\n        let rangeArray = h.range(args[0], args[1]);\r\n        for (let item of rangeArray) {\r\n            let isPrime = true;\r\n            for (i = 2; i <= Math.sqrt(item); i++){\r\n                if(item % i === 0 && item != i){\r\n                   isPrime = false;\r\n                }\r\n             }\r\n            if (isPrime === true) {\r\n                primeArray.push(item);\r\n            }\r\n        }\r\n        return primeArray;\r\n    },\r\n\r\n    isPrime: function(number) {\r\n        for (i = 2; i <= Math.sqrt(number); i++){\r\n            if(number % i === 0 && number != i){\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n\r\n    shuffle: function(array) {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n            let j = Math.floor(Math.random() * (i + 1));\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n        return array;\r\n    },\r\n\r\n    count: function(arr, item) {\r\n        let count = 0;\r\n\r\n        for(let i = 0; i < arr.length; i++) {\r\n            if(arr[i] === item) {\r\n                count += 1;\r\n            }\r\n        }\r\n        return count;\r\n    },\r\n    removeDuplicates: function(arr) {\r\n        let uniques = [];\r\n        for (item of arr) {\r\n            if(uniques.indexOf(item) === -1) {\r\n                uniques.push(item);\r\n            }\r\n        }\r\n        return uniques;\r\n    },\r\n    randomInt: function(min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1) + min);\r\n    },\r\n    randomChoice: function(array) {\r\n        let chosenInt = Math.floor(Math.random() * array.length);\r\n        return array[chosenInt];\r\n    },\r\n    getPythagoreanTriples: function(num) {\r\n        let triplesArray = [];\r\n        for (let i = 2; i < num; i++) {\r\n            for (let j = i; j < num; j++) {\r\n                for (let k = j; k < num; k++) {\r\n                    if((i**2) + (j**2) == (k**2)) {\r\n                        triplesArray.push([i, j, k]);\r\n                    }\r\n                }\r\n            }\r\n        } \r\n        return triplesArray;\r\n    },\r\n    addDigitsOfLargeNumber: function(largeNumber) {\r\n        let newLargeNumber = String(BigInt(largeNumber));\r\n        let numArray = newLargeNumber.split('');\r\n        let answer = h.add(numArray);\r\n        return answer;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// Helper functions\r\n\r\n// Range helper -------------------------------------------------------------------------------\r\nfunction makeArray (firstNumber, secondNumber) {\r\n    let rangeArray = [];\r\n    for (let i = firstNumber; i <= secondNumber; i++) {\r\n        rangeArray.push(i);\r\n    }   \r\n    return rangeArray;\r\n}\r\n\r\nfunction makeReverseArray(firstNumber, secondNumber) {\r\n    let rangeArray = [];\r\n    for (let i = firstNumber; i >= secondNumber; i--) {\r\n        rangeArray.push(i);\r\n    }\r\n    return rangeArray;\r\n}\r\n// ------------------------------------------------------------------------------------------\r\n\r\n\r\n\r\nmodule.exports = h;","const score = {\r\n    user: 0,\r\n    computer: 0,\r\n}\r\n\r\nconst displayScore = {\r\n    user: document.querySelector('.user-score'),\r\n    computer: document.querySelector('.computer-score'),\r\n    displayContent: document.querySelector('.display-content'),\r\n}\r\n\r\nexport { score, displayScore }","import h from 'home-on-the-range'\r\nimport { score, displayScore } from './score'\r\n\r\n\r\nconst addListenerAndStartGame = () => {\r\n    document\r\n    .querySelector('.buttons-container')\r\n    .addEventListener('click', event => runTheGame(event))\r\n}\r\n\r\nconst assignDisplayScoreVariables = () => {\r\n    displayScore.user.textContent = score.user\r\n    displayScore.computer.textContent = score.computer\r\n}\r\n\r\n\r\n// FIRES GAME EVENTS AND LOGIC ON CLICK\r\nconst runTheGame = event => {\r\n    let userChoice = ''\r\n\r\n    switch (event.target.className) {\r\n        case 'rock':\r\n            userChoice = 'rock'\r\n            break\r\n        case 'paper':\r\n            userChoice = 'paper'\r\n            break\r\n        case 'scissors':\r\n            userChoice = 'scissors'\r\n            break\r\n        default:\r\n            log('error...not a valid option')\r\n    }\r\n\r\n    pickWinner(userChoice)\r\n}\r\n\r\n\r\n// GAME LOGIC\r\nconst pickWinner = (userChoice) => {\r\n    const computerChoice = h.randomChoice(['rock', 'paper', 'scissors'])\r\n    if (userChoice === computerChoice) {\r\n        console.log('tie')\r\n        displayScore.displayContent.textContent = `(You: ${userChoice}) VS (Computer: ${computerChoice}) >>> It's a tie!!`\r\n    }\r\n    else if (   userChoice === 'rock' && computerChoice === 'paper'\r\n             || userChoice === 'paper' && computerChoice === 'scissors'\r\n             || userChoice === 'scissors' && computerChoice === 'rock') {\r\n        score.computer++\r\n        displayScore.computer.textContent = score.computer\r\n        displayScore.displayContent.textContent = `(You: ${userChoice}) VS (Computer: ${computerChoice}) >>> You lose, try again!`\r\n    }\r\n    else {\r\n        score.user++\r\n        displayScore.user.textContent = score.user\r\n        displayScore.displayContent.textContent = `(You: ${userChoice}) VS (Computer: ${computerChoice}) >>> You won! Best of 3??`\r\n    }\r\n}\r\n\r\n\r\n\r\nexport { addListenerAndStartGame, assignDisplayScoreVariables }","import { addListenerAndStartGame, assignDisplayScoreVariables } from './src/app'\r\n\r\nconst main = () => {\r\n    addListenerAndStartGame()\r\n    assignDisplayScoreVariables()\r\n}\r\n\r\nmain()"]}