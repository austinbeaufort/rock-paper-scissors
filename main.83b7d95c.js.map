{"version":3,"sources":["node_modules/home-on-the-range/index.js","src/score.js","src/app.js","main.js"],"names":["score","user","computer","displayScore","document","querySelector","displayContent","addListenerAndStartGame","addEventListener","event","runTheGame","assignDisplayScoreVariables","textContent","userChoice","target","className","log","pickWinner","computerChoice","h","randomChoice","console","main"],"mappings":"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","file":"main.83b7d95c.js","sourceRoot":"..","sourcesContent":["const h = {\r\n    range: function(firstNumber, secondNumber) {\r\n \r\n        if (firstNumber < 0 && secondNumber === undefined) {\r\n            secondNumber = 0;\r\n            return makeArray(firstNumber, secondNumber);\r\n        } \r\n        \r\n        else if (secondNumber === undefined) {\r\n            secondNumber = firstNumber;\r\n            firstNumber = 0;\r\n            return makeArray(firstNumber, secondNumber);\r\n        } \r\n        \r\n        else if (firstNumber <= secondNumber) {\r\n            return makeArray(firstNumber, secondNumber);\r\n        } \r\n        \r\n        else if (firstNumber >= secondNumber) {\r\n            return makeReverseArray(firstNumber, secondNumber);\r\n        }\r\n    \r\n        return rangeArray;\r\n    },\r\n    \r\n    // adds strings and numbers\r\n    add: function(...numbers) {\r\n        let numbersFlattened = numbers.reduce((accumulator, currentValue) => accumulator.concat(currentValue), []);\r\n\r\n        let numbersToBeSummed = numbersFlattened.map((item) => Number(item));\r\n        \r\n    \r\n        let sum = numbersToBeSummed.reduce((accumulator, currentValue) => accumulator + currentValue);\r\n        return sum;\r\n    },\r\n    \r\n    // complete array flatten\r\n    deep: function(...arrays) {\r\n        let levelArray = [];\r\n        for (let i = 0; i < arrays.length; i++) {\r\n            if(!Array.isArray(arrays[i])) {\r\n                levelArray.push(arrays[i]);\r\n                continue;\r\n            }\r\n            let newArray = arrays[i].flat(Infinity);\r\n            levelArray.push(newArray);\r\n        }\r\n        let flatArray = levelArray.flat();\r\n        return flatArray;\r\n    },\r\n\r\n    // \r\n    createFibArray: function(numToReach) {\r\n        let firstNum = BigInt(1);\r\n        let secondNum = BigInt(1);\r\n        let total = 0;\r\n        let fibArray = [];\r\n        let count = 0;\r\n        fibArray.push(BigInt(total));\r\n        fibArray.push(firstNum);\r\n        fibArray.push(secondNum);\r\n        while(true) {\r\n            total = BigInt(firstNum + secondNum);\r\n            if (count < numToReach) {\r\n                fibArray.push(total);\r\n                firstNum = BigInt(secondNum);\r\n                secondNum = BigInt(total);\r\n                count++;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        return fibArray;\r\n    },\r\n    getPrimeFactors: function(number) {\r\n        let primeArray = [];\r\n        let i = 2;\r\n        while(i < 1000000) {\r\n            if (number % i === 0) {\r\n                primeArray.push(i);\r\n                number /= i;\r\n                i = 2;\r\n            }\r\n            else {\r\n                i++;\r\n            }\r\n        }\r\n        return primeArray;\r\n    },\r\n\r\n    findLargestPrimeFactor: function(number) {\r\n        let primeArray = this.getPrimeFactors(number);\r\n        let largestPrime = Math.max(...primeArray);\r\n        return largestPrime;\r\n    },\r\n\r\n    findSmallestPrimeFactor: function(number) {\r\n        let primeArray = this.getPrimeFactors(number);\r\n        let smallestPrime = Math.min(...primeArray);\r\n        return smallestPrime;\r\n    },\r\n\r\n    numIsPalindrome: function(number) {\r\n        let newNumber = String(number).split('');\r\n        let numToCheck = Math.floor(newNumber.length / 2);\r\n        for (let i = 0; i <= numToCheck; i++) {\r\n            if (newNumber[i] == newNumber[newNumber.length - i - 1]) {\r\n                if (i == numToCheck) {\r\n                    return true;\r\n                }\r\n                continue;\r\n            }\r\n            break;\r\n        }\r\n        return false;\r\n    },\r\n\r\n    findLCM: function(...args) {\r\n        let newArray = this.deep(args);\r\n        let numArray = newArray.map(item => Number(item));\r\n        let found = false;\r\n        let answer = 2;\r\n        while (found === false) {\r\n            found = numArray.every(item => {\r\n                return answer % item === 0;\r\n            });\r\n            if (found === true) return answer;\r\n            answer++;\r\n        }\r\n        return answer;\r\n    },\r\n\r\n    findNthPrime: function(number) {\r\n        let count = 0;\r\n        let rangeArray = h.range(2, 50000000);\r\n        for (let item of rangeArray) {\r\n            let isPrime = true;\r\n            for (i = 2; i <= Math.sqrt(item); i++){\r\n                if(item % i === 0 && item != i){\r\n                   isPrime = false;\r\n                }\r\n             }\r\n            if (isPrime === true) {\r\n                count++;\r\n                if (count === number) {\r\n                    return item;\r\n                }\r\n            }\r\n        }\r\n        return primeArray;\r\n    },\r\n\r\n    getPrimeArray: function(...args) {\r\n        let primeArray = [];\r\n        if (args.length === 1) {\r\n            args[1] = args[0];\r\n            args[0] = 2;\r\n        }\r\n        let rangeArray = h.range(args[0], args[1]);\r\n        for (let item of rangeArray) {\r\n            let isPrime = true;\r\n            for (i = 2; i <= Math.sqrt(item); i++){\r\n                if(item % i === 0 && item != i){\r\n                   isPrime = false;\r\n                }\r\n             }\r\n            if (isPrime === true) {\r\n                primeArray.push(item);\r\n            }\r\n        }\r\n        return primeArray;\r\n    },\r\n\r\n    isPrime: function(number) {\r\n        for (i = 2; i <= Math.sqrt(number); i++){\r\n            if(number % i === 0 && number != i){\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n\r\n    shuffle: function(array) {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n            let j = Math.floor(Math.random() * (i + 1));\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n        return array;\r\n    },\r\n\r\n    count: function(arr, item) {\r\n        let count = 0;\r\n\r\n        for(let i = 0; i < arr.length; i++) {\r\n            if(arr[i] === item) {\r\n                count += 1;\r\n            }\r\n        }\r\n        return count;\r\n    },\r\n    removeDuplicates: function(arr) {\r\n        let uniques = [];\r\n        for (item of arr) {\r\n            if(uniques.indexOf(item) === -1) {\r\n                uniques.push(item);\r\n            }\r\n        }\r\n        return uniques;\r\n    },\r\n    randomInt: function(min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1) + min);\r\n    },\r\n    randomChoice: function(array) {\r\n        let chosenInt = Math.floor(Math.random() * array.length);\r\n        return array[chosenInt];\r\n    },\r\n    getPythagoreanTriples: function(num) {\r\n        let triplesArray = [];\r\n        for (let i = 2; i < num; i++) {\r\n            for (let j = i; j < num; j++) {\r\n                for (let k = j; k < num; k++) {\r\n                    if((i**2) + (j**2) == (k**2)) {\r\n                        triplesArray.push([i, j, k]);\r\n                    }\r\n                }\r\n            }\r\n        } \r\n        return triplesArray;\r\n    },\r\n    addDigitsOfLargeNumber: function(largeNumber) {\r\n        let newLargeNumber = String(BigInt(largeNumber));\r\n        let numArray = newLargeNumber.split('');\r\n        let answer = h.add(numArray);\r\n        return answer;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// Helper functions\r\n\r\n// Range helper -------------------------------------------------------------------------------\r\nfunction makeArray (firstNumber, secondNumber) {\r\n    let rangeArray = [];\r\n    for (let i = firstNumber; i <= secondNumber; i++) {\r\n        rangeArray.push(i);\r\n    }   \r\n    return rangeArray;\r\n}\r\n\r\nfunction makeReverseArray(firstNumber, secondNumber) {\r\n    let rangeArray = [];\r\n    for (let i = firstNumber; i >= secondNumber; i--) {\r\n        rangeArray.push(i);\r\n    }\r\n    return rangeArray;\r\n}\r\n// ------------------------------------------------------------------------------------------\r\n\r\n\r\n\r\nmodule.exports = h;","const score = {\r\n    user: 0,\r\n    computer: 0,\r\n}\r\n\r\nconst displayScore = {\r\n    user: document.querySelector('.user-score'),\r\n    computer: document.querySelector('.computer-score'),\r\n    displayContent: document.querySelector('.display-content'),\r\n}\r\n\r\nexport { score, displayScore }","import h from 'home-on-the-range'\r\nimport { score, displayScore } from './score'\r\n\r\n\r\nconst addListenerAndStartGame = () => {\r\n    document\r\n    .querySelector('.buttons-container')\r\n    .addEventListener('click', event => runTheGame(event))\r\n}\r\n\r\nconst assignDisplayScoreVariables = () => {\r\n    displayScore.user.textContent = score.user\r\n    displayScore.computer.textContent = score.computer\r\n}\r\n\r\n\r\n// FIRES GAME EVENTS AND LOGIC ON CLICK\r\nconst runTheGame = event => {\r\n    let userChoice = ''\r\n\r\n    switch (event.target.className) {\r\n        case 'rock':\r\n            userChoice = 'rock'\r\n            break\r\n        case 'paper':\r\n            userChoice = 'paper'\r\n            break\r\n        case 'scissors':\r\n            userChoice = 'scissors'\r\n            break\r\n        default:\r\n            log('error...not a valid option')\r\n    }\r\n\r\n    pickWinner(userChoice)\r\n}\r\n\r\n\r\n// GAME LOGIC\r\nconst pickWinner = (userChoice) => {\r\n    const computerChoice = h.randomChoice(['rock', 'paper', 'scissors'])\r\n    if (userChoice === computerChoice) {\r\n        console.log('tie')\r\n        displayScore.displayContent.textContent = `(You: ${userChoice}) VS (Computer: ${computerChoice}) >>> It's a tie!!`\r\n    }\r\n    else if (   userChoice === 'rock' && computerChoice === 'paper'\r\n             || userChoice === 'paper' && computerChoice === 'scissors'\r\n             || userChoice === 'scissors' && computerChoice === 'rock') {\r\n        score.computer++\r\n        displayScore.computer.textContent = score.computer\r\n        displayScore.displayContent.textContent = `(You: ${userChoice}) VS (Computer: ${computerChoice}) >>> You lose, try again!`\r\n    }\r\n    else {\r\n        score.user++\r\n        displayScore.user.textContent = score.user\r\n        displayScore.displayContent.textContent = `(You: ${userChoice}) VS (Computer: ${computerChoice}) >>> You won! Best of 3??`\r\n    }\r\n}\r\n\r\n\r\n\r\nexport { addListenerAndStartGame, assignDisplayScoreVariables }","import { addListenerAndStartGame, assignDisplayScoreVariables } from './src/app'\r\n\r\nconst main = () => {\r\n    addListenerAndStartGame()\r\n    assignDisplayScoreVariables()\r\n}\r\n\r\nmain()"]}